# Reading pref.tcl
# do control_signals_logic_run_msim_rtl_vhdl.do
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Copying C:/intelFPGA_lite/20.1/modelsim_ase/win32aloem/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# 
# vcom -93 -work work {C:/Users/tyler/dev/Quartus2/LA3_Control-Signals-Logic/SourceCode/mux_2.vhd}
# Model Technology ModelSim - Intel FPGA Edition vcom 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 23:09:48 on Oct 10,2022
# vcom -reportprogress 300 -93 -work work C:/Users/tyler/dev/Quartus2/LA3_Control-Signals-Logic/SourceCode/mux_2.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity mux_2
# -- Compiling architecture gate_level of mux_2
# End time: 23:09:49 on Oct 10,2022, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# vcom -93 -work work {C:/Users/tyler/dev/Quartus2/LA3_Control-Signals-Logic/SourceCode/control_signals_logic.vhd}
# Model Technology ModelSim - Intel FPGA Edition vcom 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 23:09:49 on Oct 10,2022
# vcom -reportprogress 300 -93 -work work C:/Users/tyler/dev/Quartus2/LA3_Control-Signals-Logic/SourceCode/control_signals_logic.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity control_signals_logic
# -- Compiling architecture rtl of control_signals_logic
# End time: 23:09:49 on Oct 10,2022, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vcom -93 -work work {C:/Users/tyler/dev/Quartus2/LA3_Control-Signals-Logic/SourceCode/d_ff.vhd}
# Model Technology ModelSim - Intel FPGA Edition vcom 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 23:09:49 on Oct 10,2022
# vcom -reportprogress 300 -93 -work work C:/Users/tyler/dev/Quartus2/LA3_Control-Signals-Logic/SourceCode/d_ff.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity d_ff
# -- Compiling architecture rtl of d_ff
# End time: 23:09:49 on Oct 10,2022, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
do testbench.do
# Model Technology ModelSim - Intel FPGA Edition vcom 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 23:09:54 on Oct 10,2022
# vcom -reportprogress 300 -93 -work work C:/Users/tyler/dev/Quartus2/LA3_Control-Signals-Logic/SourceCode/testbench.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity testbench
# -- Compiling architecture gate_level of testbench
# End time: 23:09:55 on Oct 10,2022, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# vsim work.testbench 
# Start time: 23:09:55 on Oct 10,2022
# Loading std.standard
# Loading std.textio(body)
# Loading ieee.std_logic_1164(body)
# Loading ieee.numeric_std(body)
# Loading work.testbench(gate_level)
# Loading work.control_signals_logic(rtl)
# Loading work.mux_2(gate_level)
# Loading work.d_ff(rtl)
# ** Note: Output correct for Fetch MAR <- [PC]
#    Time: 30 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch IR <- [MAR]
#    Time: 50 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch ALU (Q) <- [PC] LOAD
#    Time: 70 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch PC <- [ALU] LOAD
#    Time: 90 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for MAR <- [IR] LOAD
#    Time: 110 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for D0 <- [MAR] LOAD
#    Time: 130 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch MAR <- [PC]
#    Time: 150 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch IR <- [MAR]
#    Time: 170 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch ALU (Q) <- [PC] STORE
#    Time: 190 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch PC <- [ALU] STORE
#    Time: 210 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for MAR <- [IR] STORE
#    Time: 230 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for D0 <- [MAR] STORE
#    Time: 250 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch MAR <- [PC]
#    Time: 270 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch IR <- [MAR]
#    Time: 290 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch ALU (Q) <- [PC] ADD
#    Time: 310 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch PC <- [ALU] ADD
#    Time: 330 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for MAR <- [IR] ADD
#    Time: 350 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for MBR <- [MAR] ADD
#    Time: 370 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for ALU (P) <- [MBR] ADD
#    Time: 390 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for D0 <- [ALU] ADD
#    Time: 410 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch MAR <- [PC]
#    Time: 430 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch IR <- [MAR]
#    Time: 450 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch ALU (Q) <- [PC] sub
#    Time: 470 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch PC <- [ALU] sub
#    Time: 490 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for MAR <- [IR] sub
#    Time: 510 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for MBR <- [MAR] sub
#    Time: 530 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for ALU (P) <- [MBR] sub
#    Time: 550 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for D0 <- [ALU] sub
#    Time: 570 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch MAR <- [PC]
#    Time: 590 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch IR <- [MAR]
#    Time: 610 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch ALU (Q) <- [PC] inc
#    Time: 630 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch PC <- [ALU] inc
#    Time: 650 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for MAR <- [IR] inc
#    Time: 670 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for MBR <- [MAR] inc
#    Time: 690 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for ALU (P) <- [MBR] inc
#    Time: 710 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for D0 <- [ALU] inc
#    Time: 730 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch MAR <- [PC]
#    Time: 750 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch IR <- [MAR]
#    Time: 770 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch ALU (Q) <- [PC] dec
#    Time: 790 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch PC <- [ALU] dec
#    Time: 810 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for MAR <- [IR] dec
#    Time: 830 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for MBR <- [MAR] dec
#    Time: 850 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for ALU (P) <- [MBR] dec
#    Time: 870 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for D0 <- [ALU] dec
#    Time: 890 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch MAR <- [PC]
#    Time: 910 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch IR <- [MAR]
#    Time: 930 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch ALU (Q) <- [PC] bra
#    Time: 950 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch PC <- [ALU] bra
#    Time: 970 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for PC <- IR bra
#    Time: 990 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch MAR <- [PC]
#    Time: 1030 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch IR <- [MAR]
#    Time: 1050 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch ALU (Q) <- [PC] beq
#    Time: 1070 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch PC <- [ALU] beq
#    Time: 1090 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for PC <- [IR] beq when Z = 1
#    Time: 1110 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch MAR <- [PC]
#    Time: 1150 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch IR <- [MAR]
#    Time: 1170 ns  Iteration: 0  Instance: /testbench
# ** Note: Output correct for Fetch ALU (Q) <- [PC] beq
#    Time: 1190 ns  Iteration: 0  Instance: /testbench
# End time: 23:17:26 on Oct 10,2022, Elapsed time: 0:07:31
# Errors: 0, Warnings: 0
