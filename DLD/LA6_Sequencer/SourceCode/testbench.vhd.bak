LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;

ENTITY testbench IS 
END testbench;

ARCHITECTURE gate_level OF testbench IS 

  component instruction_sequencer
    PORT
      (
        opcode : in std_logic_vector(2 downto 0);
        reset : in std_logic;
        clock : in std_logic;
        t0 : out std_logic;
        t1 : out std_logic;
        t2 : out std_logic;
        t3 : out std_logic;
        t4 : out std_logic;
        t5 : out std_logic;
        t6 : out std_logic;
        t7 : out std_logic;
        execute : out std_logic
	);
  END component;

  signal reset_signal :  STD_LOGIC := '0';
  signal clock_signal :  STD_LOGIC := '0';
  signal opcode_signal : std_logic_vector(2 downto 0);
  signal t0_signal : std_logic;
  signal t1_signal : std_logic;
  signal t2_signal : std_logic;
  signal t3_signal : std_logic;
  signal t4_signal : std_logic;
  signal t5_signal : std_logic;
  signal t6_signal : std_logic;
  signal t7_signal : std_logic;
  signal execute_signal : std_logic;

BEGIN 

  instruction_sequencer_0 : instruction_sequencer
    PORT MAP(
      opcode => opcode_signal,
      reset => reset_signal,
      clock => clock_signal,
      t0 => t0_signal,
      t1 => t1_signal,
      t2 => t2_signal,
      t3 => t3_signal,
      t4 => t4_signal,
      t5 => t5_signal,
      t6 => t6_signal,
      t7 => t7_signal,
      execute => execute_signal
      );

  clock_process : process
  begin
    wait for 50 ns;
    clock_signal <= not clock_signal;
  end process;

  testbench_process : process
    variable opcode_index : integer := 0;
  begin
    
    -- Enable/disable reset, generate opcode signal, then wait for successive clock signals
    for opcode_index in 0 to 7 loop
      
      reset_signal <= '1';
      wait for 1 ns;
      reset_signal <= '0';
      wait for 1 ns;
      opcode_signal <= std_logic_vector(to_unsigned(opcode_index,3));
      wait for 1 ns;
      
      wait until rising_edge(clock_signal);
      wait until rising_edge(clock_signal);
      wait until rising_edge(clock_signal);
      wait until rising_edge(clock_signal);
      wait until rising_edge(clock_signal);
      wait until rising_edge(clock_signal);
      wait until rising_edge(clock_signal);
      wait until rising_edge(clock_signal);
      wait until rising_edge(clock_signal);

    end loop;

    wait;
    
  end process testbench_process;

END gate_level;