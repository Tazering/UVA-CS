halt #index 0
halt #jdex
halt #jdexP
halt #jNext
halt #jcurrent
halt #baseAddress b
halt #size 10
halt #temp 0
halt #zero 0	
halt #one 1
halt #storeit 4000
halt #loadit 3000
halt
halt
load size #loop #start
sub index
jmpe loop 1 end
load storeit
add baseAddress
add index
store storeit 
readH
storeit #storeit
load index
add one
store index
jmp loop 1 #loop 1 end
load zero
store index

// beginning of second loop--------------------------------
//outer loop

load index	#outer loop	while(i < s)
sub size
jmpe print

load s		j = 2
sub one
store jdex

load jdex
sub one
store jdexP	jp = 1

//inner loop

load i		#inner loop	while(i < j)
sub jdex
jmpe endInnerLoop

load loadit	jc = a[j]
add base
add jdex
store loadit-1
loadit-1
store jc

load loadit	jn = a[j - 1]
add base
add jdexP
store loadit-2
loadit-2
store jn

load jn	if(jn - jc < 0)
sub jc
jmpl subJ

load storeit	a[j] = jn
add base
add jdex
store storeit-1
load jn
storeit-1

load storeit	a[j-1] = jc
add base
add jdexP
store storeit-2
load jc
storeit-2

load jdex #subj	j--
sub one
store jdex

load jdexP 		jp--
sub one
store jp

jmp inner loop

load i	#endInnerLoop 	i++
add one
store i

jmp outerLoop
//printing stuff-------------------------------------------------------
** decrement i
load size #loop 3 //printing
sub index
jmpe xit
load loadit
add baseAddress
add index
store loadit
loadit #loadit
printH
load index
add one
store index
jmp loop3
halt xit



